% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dw_legend_to_string.R
\name{dw_legend_to_string}
\alias{dw_legend_to_string}
\title{Creates a legend from a Datawrapper chart}
\usage{
dw_legend_to_string(
  legend,
  return_val = c("string", "vector", "html"),
  use_ranges = FALSE
)
}
\arguments{
\item{legend}{Required. A Datawrapper-API-key as character string. Defaults to "environment" - tries to automatically retrieve the key that's stored in the .Reviron-file by \code{\link{datawrapper_auth}}.}

\item{return_val}{Required. One of c("string", "vector", "html"). Set the output type. Defaults to "string".}

\item{use_ranges}{Optional. Filters out automatically generated ranges (e.g. \verb{(0,10]}). Defaults to FALSE.}
}
\value{
A string, vector or HTML (as string), as defined in \code{return_val}.
}
\description{
\lifecycle{maturing}
A helper function that creates a legend as string, vector or HTML from an existing legend in a Datawrapper chart.
}
\section{How to}{


Create a chart that displays the required legend. Then use \code{\link{dw_retrieve_chart_metadata(chart_id)}} to download the meta-information of your chart into a R-variable.
You may then extract the legend as a string. It might for example be stored in \code{metadata[["content"]][["metadata"]][["visualize"]][["categories"]]} or in \code{metadata[["content"]][["metadata"]][["visualize"]][["custom-colors"]]}.
}

\examples{

\dontrun{

dw_legend_to_string(legend)

dw_legend_to_string(legend, return_val = "html") # return simple HTML-code

dw_legend_to_string(legend, use_ranges = TRUE) # filter out ranges
}
}
\author{
Benedict Witzenberger
}
